#!/usr/bin/env python3

import json
from datetime import datetime
from textwrap import dedent
from typing import Iterable

import yaml


MD_FILENAME = "DEPLOYMENTS.md"
A100_TOTAL_MEM = 220  # Gi


def flatten(l: Iterable) -> list:
    ret = []
    for el in l:
        if isinstance(el, list):
            ret.extend(flatten(el))
        else:
            ret.append(el)
    return ret


def get_model_usage(filename):
    with open(filename) as f:
        values = json.load(f)
    return {row["model"]: row["Count"] for row in values}


def get_deployments(filename):
    # filename: yaml filename
    with open(filename) as f:
        values = yaml.safe_load(f)
    deployments = values["deployments"]
    queue_name_vars = values["autoscaling"]["queueNameVars"]
    return [
        {
            "name": depl["name"],
            "memoryLimit": depl.get("limits", {}).get("memory", None),
            "replicas": depl.get("autoscaling", {}).get("minReplicaCount", 1),
            "models": list(
                filter(
                    bool,
                    flatten(
                        [
                            depl.get("env", {}).get(qnv, "").split("\n")
                            for qnv in queue_name_vars
                        ]
                    ),
                )
            ),
        }
        for depl in deployments
    ]


def main():
    deployments = get_deployments(filename="chart/model-values.yaml")

    md_table = [
        ["Name", "% of A100", "Replicas", "Model IDs"],
    ]

    for info in deployments:
        if memoryLimit := info["memoryLimit"]:
            a100_fraction = int(memoryLimit.removesuffix("Gi")) / A100_TOTAL_MEM
        else:
            a100_fraction = None
        md_table.append(
            [
                info["name"],
                f"{a100_fraction:.2%}" if a100_fraction else "N/A",
                str(info["replicas"]),
                (info["models"] or ["N/A"])[0],
            ]
        )
        for model in info["models"][1:]:
            md_table.append(["", "", "", model])

    with open(MD_FILENAME, "w") as f:
        f.write(
            dedent(
                f"""\
        # Deployments Table

        Generated by {__file__.rsplit("/", maxsplit=1)[-1]} on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}.

        """
            )
        )

        header = "| " + " | ".join(md_table[0]) + " |\n"
        f.write(header)
        sep = "| " + " | ".join(["---"] * len(md_table[0])) + " |\n"
        f.write(sep)

        for row in md_table[1:]:
            f.write("| " + " | ".join(row) + " |\n")

    print("Wrote", MD_FILENAME)


if __name__ == "__main__":
    main()
